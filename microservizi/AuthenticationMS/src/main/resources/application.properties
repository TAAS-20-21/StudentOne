# Database configuration props
spring.datasource.url=jdbc:postgresql://${DB_SERVER}/${POSTGRES_DB}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

spring.application.name=authenticateservice

spring.cloud.config.enabled=true

eureka.instance.prefer-ip-address=true
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone:http://eurekahostname:8761/eureka/

# Hibernate props
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.show-sql=true

# Social login provider props

spring.security.oauth2.client.registration.google.clientId=607394223265-4ducgrur9gtade85h9lthrhlsgta7jdr.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=Xr0bjN_UuYxNMxSBrjOgGs2N
spring.security.oauth2.client.registration.google.scope=email,profile,https://www.googleapis.com/auth/calendar

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:4200/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# For detailed logging during development
logging.level.com=debug
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE

#server.servlet.context-path=/StudentOne
server.port = 8081

rabbitmq.host = rabbitmq
rabbitmq.port = 5672
rabbitmq.username = guest
rabbitmq.password = guest


